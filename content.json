{"meta":{"title":"Just a blog","subtitle":null,"description":"recode interesting things everywhere","author":"CheshireCat","url":"http://yoursite.com"},"pages":[{"title":"Categories","date":"2018-04-04T09:26:22.360Z","updated":"2018-04-04T09:26:22.360Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"gallery","date":"2018-04-03T12:41:32.000Z","updated":"2018-04-03T12:41:32.870Z","comments":true,"path":"gallery/index.html","permalink":"http://yoursite.com/gallery/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-04-04T09:25:48.222Z","updated":"2018-04-04T09:25:48.222Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2018-04-04T09:26:19.029Z","updated":"2018-04-04T09:26:19.029Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Unity 框选的实现","slug":"Unity-框选的实现","date":"2018-05-16T05:51:06.000Z","updated":"2018-05-16T06:43:04.593Z","comments":true,"path":"2018/05/16/Unity-框选的实现/","link":"","permalink":"http://yoursite.com/2018/05/16/Unity-框选的实现/","excerpt":"","text":"思路框选难点在与如何知道在世界坐标系的可选择物体与用在屏幕上框选的方框的的位置的对比. 因此,可以选择将所有可选择物体的世界坐标转化为屏幕上的坐标,然后,再与屏幕上的方框的位置进行对比,既可以得出在方框内的所有物体了. 实现首先,实现这个功能需要有三个步骤 步骤一:确定多选框的位置确定多选框的位置实现比较简单,就是利用鼠标点下的时候记录矩形的开始坐标,在鼠标抬起的时候记录矩形的结束坐标 在Update()当中可以轻松实现1234567891011121314151617// Update is called once per framevoid Update()&#123; if (Input.GetMouseButtonDown(0)) &#123; mIsDrawRectangle = true; //开始绘制多选框 mStartPos = Input.mousePosition; &#125; else if (Input.GetMouseButtonUp(0)) &#123; mIsDrawRectangle = false; //结束绘制多选框 mEndPos = Input.mousePosition; //检查被选中的物体 CheckSelection(mStartPos, mEndPos); &#125;&#125; 步骤二:框选框的实现在Unity当中,在屏幕上的绘图可以利用OpenGL的函数来实现. 在OnPostRender()函数当中也可以很轻松的实现框框的绘制(由于只是对屏幕的绘制,因此比放在Update()当中更加适合) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566private void OnPostRender() &#123; if (mIsDrawRectangle) &#123; //实时获取需要绘制的矩形的大小 mEndPos = Input.mousePosition; GL.PushMatrix(); //将矩阵入栈 //矩形框的颜色的材质 if (rectMat == null) &#123; return; &#125; rectMat.SetPass(0); GL.LoadPixelMatrix(); //绘制一个半透明的矩形 DrawRect(); //绘制矩形的边 DrawLine(); //完成绘制,将矩阵出栈 GL.PopMatrix(); &#125; &#125; private void DrawLine() &#123; //绘制线条的模式 GL.Begin(GL.LINES); GL.Color(mRectColor); //将每一个点都输入进去,然后进行线条的绘制 GL.Vertex3(mStartPos.x, mStartPos.y, 0); GL.Vertex3(mEndPos.x, mStartPos.y, 0); GL.Vertex3(mEndPos.x, mStartPos.y, 0); GL.Vertex3(mEndPos.x, mEndPos.y, 0); GL.Vertex3(mEndPos.x, mEndPos.y, 0); GL.Vertex3(mStartPos.x, mEndPos.y, 0); GL.Vertex3(mStartPos.x, mEndPos.y, 0); GL.Vertex3(mStartPos.x, mStartPos.y, 0); GL.End(); &#125; private void DrawRect() &#123; //绘制区域的模式 GL.Begin(GL.QUADS); GL.Color( new Color(rectMat.color.r, rectMat.color.g, rectMat.color.b, 0.1f)); //绘制的时候要按照一定的路线进行绘制 GL.Vertex3(mStartPos.x, mStartPos.y, 0); GL.Vertex3(mEndPos.x, mStartPos.y, 0); GL.Vertex3(mEndPos.x, mEndPos.y, 0); GL.Vertex3(mStartPos.x, mEndPos.y, 0); GL.End(); &#125; 步骤三:将可选择的物体与多选框进行位置上的对比将可选择物体的屏幕坐标与框框的大小进行对比即可 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152private void CheckSelection(Vector3 startPos, Vector3 endPos)&#123; //p1为矩形x,y值的最小值 //p2为矩形x,y值的最大值 Vector3 p1 = Vector3.zero; Vector3 p2 = Vector3.zero; if (startPos.x &gt; endPos.x) &#123; p1.x = endPos.x; p2.x = startPos.x; &#125; else &#123; p1.x = startPos.x; p2.x = endPos.x; &#125; if (startPos.y &gt; endPos.y) &#123; p1.y = endPos.y; p2.y = startPos.y; &#125; else &#123; p1.y = startPos.y; p2.y = endPos.y; &#125; //寻找被选中的目标与没有被选中的目标 foreach (var obj in characterList) &#123; //物体的位置 Vector3 location = Camera.main.WorldToScreenPoint(obj.transform.position); //在方框内且没有被遮挡才可以被选中 if (location.x &lt; p1.x || location.x &gt; p2.x || location.y &lt; p1.y || location.y &gt; p2.y || location.z &lt; Camera.main.nearClipPlane || location.z &gt; Camera.main.farClipPlane) &#123; //没选中 obj.GetComponent&lt;MeshRenderer&gt;().material.color = Color.blue; &#125; else &#123; //选中 obj.GetComponent&lt;MeshRenderer&gt;().material.color = Color.red; &#125; &#125;&#125; 从此就可以实现多选的效果了 脚本代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144public class MultiSelect : MonoBehaviour&#123; //可选择的物体的列表 public List&lt;GameObject&gt; characterList = new List&lt;GameObject&gt;(); //方框的边线的颜色 private Color mRectColor = Color.green; //框选的坐标 private Vector3 mStartPos = Vector3.zero; private Vector3 mEndPos = Vector3.zero; //多选框的材质 public Material rectMat; //是否需要绘制多选框 private bool mIsDrawRectangle = false; // Update is called once per frame void Update() &#123; if (Input.GetMouseButtonDown(0)) &#123; mIsDrawRectangle = true; mStartPos = Input.mousePosition; &#125; else if (Input.GetMouseButtonUp(0)) &#123; mIsDrawRectangle = false; mEndPos = Input.mousePosition; CheckSelection(mStartPos, mEndPos); &#125; &#125; private void OnPostRender() &#123; if (mIsDrawRectangle) &#123; mEndPos = Input.mousePosition; GL.PushMatrix(); if (rectMat == null) &#123; return; &#125; rectMat.SetPass(0); GL.LoadPixelMatrix(); //绘制一个半透明的矩形 DrawRect(); //绘制矩形的边 DrawLine(); GL.PopMatrix(); &#125; &#125; private void CheckSelection(Vector3 startPos, Vector3 endPos) &#123; //p1为矩形x,y值的最小值 //p2为矩形x,y值的最大值 Vector3 p1 = Vector3.zero; Vector3 p2 = Vector3.zero; if (startPos.x &gt; endPos.x) &#123; p1.x = endPos.x; p2.x = startPos.x; &#125; else &#123; p1.x = startPos.x; p2.x = endPos.x; &#125; if (startPos.y &gt; endPos.y) &#123; p1.y = endPos.y; p2.y = startPos.y; &#125; else &#123; p1.y = startPos.y; p2.y = endPos.y; &#125; //寻找被选中的目标与没有被选中的目标 foreach (var obj in characterList) &#123; Vector3 location = Camera.main.WorldToScreenPoint(obj.transform.position); if (location.x &lt; p1.x || location.x &gt; p2.x || location.y &lt; p1.y || location.y &gt; p2.y || location.z &lt; Camera.main.nearClipPlane || location.z &gt; Camera.main.farClipPlane) &#123; //没选中 obj.GetComponent&lt;MeshRenderer&gt;().material.color = Color.blue; &#125; else &#123; //选中 obj.GetComponent&lt;MeshRenderer&gt;().material.color = Color.red; &#125; &#125; &#125; private void DrawLine() &#123; GL.Begin(GL.LINES); GL.Color(mRectColor); GL.Vertex3(mStartPos.x, mStartPos.y, 0); GL.Vertex3(mEndPos.x, mStartPos.y, 0); GL.Vertex3(mEndPos.x, mStartPos.y, 0); GL.Vertex3(mEndPos.x, mEndPos.y, 0); GL.Vertex3(mEndPos.x, mEndPos.y, 0); GL.Vertex3(mStartPos.x, mEndPos.y, 0); GL.Vertex3(mStartPos.x, mEndPos.y, 0); GL.Vertex3(mStartPos.x, mStartPos.y, 0); GL.End(); &#125; private void DrawRect() &#123; GL.Begin(GL.QUADS); GL.Color(new Color(rectMat.color.r, rectMat.color.g, rectMat.color.b, 0.1f)); GL.Vertex3(mStartPos.x, mStartPos.y, 0); GL.Vertex3(mEndPos.x, mStartPos.y, 0); GL.Vertex3(mEndPos.x, mEndPos.y, 0); GL.Vertex3(mStartPos.x, mEndPos.y, 0); GL.End(); &#125;&#125;","categories":[],"tags":[]},{"title":"Oracle--从创建数据库到表的建立","slug":"Oracle-从创建数据库到表的建立","date":"2018-05-14T08:19:06.000Z","updated":"2018-05-14T09:13:23.352Z","comments":true,"path":"2018/05/14/Oracle-从创建数据库到表的建立/","link":"","permalink":"http://yoursite.com/2018/05/14/Oracle-从创建数据库到表的建立/","excerpt":"","text":"前言Oracle数据库是目前最流行的客户/数据库体系结构的数据库之一,他在建立数据库以及表的存储与建立都与MySQL有一些不同,现在,就从零开始建立数据库吧 建立数据库首先是建立数据库,在安装了Oracle之后,会有一个数据库的配置程序1Database Configuration Assistant 在这个配置程序里,一共有12步,完成之后只需要等待就可以建立数据库了. 建立表空间的准备建立表空间,首先要登陆到刚刚创建的数据库上去.有两个方法可以登录,一个是利用Oracle自带的命令行界面,另一个则是使用一款专门用于打开Oracle数据库的图形化界面软件12SQL plus //Oracle自带的命令行界面 PL\\SQL developer //可以用于管理Oracle数据库的第三方软件 然后,进行登陆12username: systempassword: [自己设置的口令] 之后就可以进行表空间的建立了 建立表空间首先,建立表空间之前要先知道什么是表空间 Oracle的表空间属于Oracle中的存储结构，是一种用于存储数据库对象(如：数据文件)的逻辑空间，是Oracle中信息存储的最大逻辑单元，其下还包含有段、区、数据块等逻辑数据类型。表空间是在数据库中开辟的一个空间，用于存放数据库的对象，一个数据库可以由多个表空间组成。可以通过表空间来实现对Oracle的调优。（Oracle数据库独特的高级应用） 可以认为表空间就是存放Oracle数据库当中表的地方 那么我们现在就来建立表空间吧(若是在SQL Plus的话则可以直接进行命令行操作,要是在PL\\SQL Developer 的话则是可以创建SQL窗口进行操作)123456create tablespace [表空间的名称] datafile [表空间所存放的文件的地址] size [表空间大小]extend management local autoallocate//最后一句的指令意思为当需要扩大空间时,自行扩大//其中表空间的文件名要以.dbf结尾,如&apos;E:\\test.dbf&apos; 这样,我们就已经建立成功表空间了,之后,就可以在表空间当中添加表了. 当然,在添加表之前我们还有一个操作,就是为你创立的数据库建立用户,因为,system这个账号是全局的账号,因此,我们还需要一个用于管理某个表空间的管理员 创建账号123456//创建账号create user [账号名称] identified by [账号密码] default tablespace [表空间名称] quota [可使用的大小] on users;//为账号分配权限grant all privilege to [账号名称] 由于是管理员账号,那自然是分配全部权限给他了 建立表在创建完用户之后,就可以创建表了,首先还是要先登陆到你之前创建的用户上去 然后,就可以按照SQL语句来建立数据库表了123456789//创建表create table student( stu_id int not null primary key, stu_name varchar(10) not null, stu_age int)//建立外键alter student add foreign key (stu_name) reference teacher(teach_name) 有或者是想要建立带组合的主键12345678create table teacher( tea_id int not null, tea_name varchar(10) not null, teach_name varchar(10) not null, tea_sex int, constraint teacher primary key (tea_id,tea_name)) 等等的操作","categories":[],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://yoursite.com/tags/Oracle/"}]},{"title":"C#--关于Timer的小优化","slug":"C-关于Timer的小优化","date":"2018-04-06T15:36:36.000Z","updated":"2018-04-07T14:59:15.360Z","comments":true,"path":"2018/04/06/C-关于Timer的小优化/","link":"","permalink":"http://yoursite.com/2018/04/06/C-关于Timer的小优化/","excerpt":"","text":"关于Timer在C#当中,Timer对象的其中一个作用就是，使得一个事件能够延迟执行。而Timer的实现方式则是，开启一个线程去记录当前的时间，当达到要延迟触发的事件的时间的时候，将会触发事件。 但这会导致一个问题，当有很多很多的延迟事件需要触发的话，则会使得进程开启十分十分多的线程，从而导致性能的消耗。 因此，在这种情况下就需要一些小小的优化。 优化思路关于Timer的优化思路在于，使得一个多线程执行的任务转化为一个单线程的任务。也就是说，将需要延迟执行的任务都放在一个任务队列当中，当到达时间之后，就依次执行队列当中的任务，这样就使得只需要一个Timer就可以达成大量事件的延迟执行的效果。 实现方式由于是要实现大量的事件触发，因此，只需要维持着一个一直执行的Timer，而这个Timer在极短时间内就会进行一次触发，当触发的时候就会检查任务列表当中哪些任务需要触发，并且将需要触发的触发。 同时，存在着任务的话，也自然需要销毁任务，由于是有着（可能会存在的）大量的任务的销毁，因此，自然也要将任务集中的进行销毁处理。这样可以快速销毁任务的同时，也能保证任务的触发与销毁并不会出现一些冲突的情况。 既然需要集中销毁任务，自然就需要任务销毁的列表。 为了防止任务的销毁与任务的触发出现冲突，可以将任务都在一个回掉当中触发，先检索需要销毁的任务，并且从任务列表当中将需要销毁的任务都销毁了，然后，再执行触发列表的需要触发的任务。 代码实现在这里我使用了一个单例去管理这个计数器，并且建立了一个类去封装了一些对任务的管理 class ScheduleUtill首先是单例的管理类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107//利用委托完成对定时事件的触发public delegate void ScheduleEvent();public class ScheduleUtil&#123; private static ScheduleUtil mInstance; public static ScheduleUtil Instance &#123; get &#123; if(mInstance == null) &#123; mInstance = new ScheduleUtil(); &#125; return mInstance; &#125; &#125; //等待执行的任务表 private Dictionary&lt;int, ScheduleTask&gt; mission = new Dictionary&lt;int, ScheduleTask&gt;(); //移除任务的列表 private List&lt;int&gt; removeMissionList = new List&lt;int&gt;(); private ConcurrentInteger taskID = new ConcurrentInteger(0); private Timer timer; private ScheduleUtil() &#123; //定时为200ms timer = new Timer(200); timer.Elapsed += ElapsedCallback; timer.Start(); &#125; //每隔200ms进行一次回掉 private void ElapsedCallback(object sender,ElapsedEventArgs elapsedEvent) &#123; lock (mission) &#123; lock (removeMissionList) &#123; //移除需要移除的任务 foreach(var item in removeMissionList) &#123; if (mission.ContainsKey(item)) &#123; mission.Remove(item); &#125; &#125; //执行任务表当中的任务 foreach(var item in mission.Values) &#123; //若到时间执行则执行，然后进入移除列表当中 if(item.Time &lt;= DateTime.Now.Ticks) &#123; item.Run(); removeMissionList.Add(item.ID); &#125; &#125; &#125; &#125; &#125; //添加定时任务 public int Schedule(ScheduleEvent task,long delay) &#123; return AddSchedule(task,delay * 1000 * 1000); &#125; //添加定时任务 public int Schedule(ScheduleEvent task,DateTime time) &#123; long t = time.Ticks - DateTime.Now.Ticks; t = Math.Abs(t); return AddSchedule(task, t); &#125; //添加定时任务 public int TimeSchedule(ScheduleEvent task, long time) &#123; long t = time - DateTime.Now.Ticks; t = Math.Abs(t); return AddSchedule(task, t); &#125; //添加定时任务 public int AddSchedule(ScheduleEvent task,long dealy) &#123; int id = taskID.AddValue(); ScheduleTask scheduleTask = new ScheduleTask(id, dealy + DateTime.Now.Ticks, task); mission.Add(id, scheduleTask); return id; &#125; //去除指定的定时任务 public void RemoveTask(int taskID) &#123; lock (removeMissionList) &#123; removeMissionList.Add(taskID); &#125; &#125;&#125; class ScheduleTask这是一个对任务的封装的类123456789101112131415161718192021222324252627282930313233343536373839404142public class ScheduleTask &#123; private ScheduleEvent task; //任务 private long time; //执行事件 private int id; //任务id public long Time &#123; get &#123; return time; &#125; set &#123; time = value; &#125; &#125; public int ID &#123; get &#123; return id; &#125; set &#123; id = value; &#125; &#125; public ScheduleTask(int id,long time,ScheduleEvent scheduleEvent) &#123; this.id = id; this.time = time; this.task = scheduleEvent; &#125; //任务执行 public void Run() &#123; task(); &#125;","categories":[],"tags":[{"name":"C#","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"JAVA--UDP协议下的Socket网络通讯","slug":"JAVA-UDP协议下的Socket网络通讯","date":"2018-04-04T07:11:43.000Z","updated":"2018-04-06T16:04:51.377Z","comments":true,"path":"2018/04/04/JAVA-UDP协议下的Socket网络通讯/","link":"","permalink":"http://yoursite.com/2018/04/04/JAVA-UDP协议下的Socket网络通讯/","excerpt":"","text":"UDP协议介绍UDP协议，是User Datagram Protocol,是一种无连接的传输层协议，提供面向事务的简单不可靠信息传递服务。 UDP协议和TCP协议一样是用于处理数据包，是一种无连接协议。之所以说UDP协议是不可靠的，是因为，他有着不提供数据分包，组装和不能够对数据进行排序的缺点，换句话说，即数据发出之后，就无法确认数据是否已经到达，也无法得知到达的数据是否完整。 与TCP协议一种，UDP协议也是直接位于IP协议的顶层。UDP协议的主要作用是将网络数据流量压缩为数据包的形式。一个典型的数据包就是一个二进制数据传输单位。每一个数据包的前八个字节用于记录数据包的信息，后面的字节则是包含具体的传输数据。 Socket网络通讯的实现在Java当中，有着专门利用UDP协议实现的Socket对象（DatagramSocket），利用这个类就可以轻松实现数据传输了。 具体实现思路由于在UDP协议之下，数据是以二进制的形式传输的，因此，无论在接收数据还是发送数据都需要一个byte[]来当做缓存，来记录传输过来的数据。 同时，由于UDP协议的数据传输是利用包的形式进行传输的，因此在发送与接收数据都需要接收这个数据包。在JAVA当中，有着一个专门的对象（DatagramPacket）来管理这些数据包，因此只要利用这些对象就可以轻松接收数据包，然后，再讲数据包的内容导入到缓存当中，就可以慢慢解析里面的二进制数据流了。 具体实现这是一个利用UDP协议的客户端与服务端的简单DEMO，这个DEMO的主要作用在于将客户端传入的字符串转化为全部大写的字符串然后再传回给客户端。 服务端代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public class UDPServer &#123; //缓存区大小 public static final int BUFF_SIZE = 1024; public static void main(String[] args)&#123; try &#123; //打开端口6666的连接 DatagramSocket socket = new DatagramSocket(6666); //初始化缓冲区 byte[] receiveData = new byte[BUFF_SIZE]; byte[] sendData = new byte[BUFF_SIZE]; //noinspection InfiniteLoopStatement while (true)&#123; //接收数据的数据包 DatagramPacket receivePacket = new DatagramPacket(receiveData,receiveData.length); try &#123; //Socket开始接受数据(在没有接受到数据的时候处于阻塞状态) socket.receive(receivePacket); //从接受到的数据包当中获取数据 String sentence = new String(receivePacket.getData()); //获取发送方的IP地址 InetAddress ipAddress = receivePacket.getAddress(); //获取发送方的端口 int port = receivePacket.getPort(); String capitalizedSentence = sentence.toUpperCase(); //将数据写入发送信息的缓冲区当中 sendData = capitalizedSentence.getBytes(); //将缓冲区的信息打包成数据包 DatagramPacket sendPacket = new DatagramPacket(sendData,sendData.length,ipAddress,port); //发送数据 socket.send(sendPacket); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; catch (SocketException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 客户端代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263public class UDPClient &#123; public static void main(String[] args)&#123; BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in)); try &#123; //开启UDP协议的数据传输 DatagramSocket clientSocket = new DatagramSocket(); try &#123; //由于是本地因此IP是“127.0.0.1” InetAddress ipAddress = InetAddress.getByName(&quot;127.0.0.1&quot;); int port = 6666; //初始化缓冲区 byte[] sendData = new byte[UDPServer.BUFF_SIZE]; byte[] receive = new byte[UDPServer.BUFF_SIZE]; try &#123; //获取字符串 String sentence = inFromUser.readLine(); //将数据写入缓冲区当中 sendData = sentence.getBytes(); //将数据打包成数据包 DatagramPacket sendPacket = new DatagramPacket(sendData,sendData.length,ipAddress,port); //发送数据 clientSocket.send(sendPacket); //建立接受数据的包 DatagramPacket receivePacket = new DatagramPacket(receive,receive.length); //接受数据 clientSocket.receive(receivePacket); //展示服务端返回的字符串 String notifySentence = new String(receivePacket.getData()); System.out.print(&quot;FROM SERVER &quot; + notifySentence); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; clientSocket.close(); &#125; catch (UnknownHostException e) &#123; e.printStackTrace(); &#125; &#125; catch (SocketException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 结果123hi i am udp clientFROM SERVER HI I AM UDP CLIENT Process finished with exit code 0","categories":[{"name":"technology","slug":"technology","permalink":"http://yoursite.com/categories/technology/"}],"tags":[{"name":"network","slug":"network","permalink":"http://yoursite.com/tags/network/"},{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"JAVA----TCP协议下的Socket网络通讯","slug":"JAVA-TCP协议下的Socket网络通讯","date":"2018-04-03T06:20:20.000Z","updated":"2018-04-06T16:04:36.771Z","comments":true,"path":"2018/04/03/JAVA-TCP协议下的Socket网络通讯/","link":"","permalink":"http://yoursite.com/2018/04/03/JAVA-TCP协议下的Socket网络通讯/","excerpt":"","text":"TCP协议介绍TCP协议是一种信息传递可靠的协议，他依靠着三次握手的传输规则确保了连接不会发生错误。在这个协议之下，由于需要使用三次握手去确认目标，因此，确保了数据传输的可靠性。 同时，利用TCP协议进行的数据包会有一个校验码在里面，若发现数据不准确，则接收方会要求发送方重新传输数据。 Socket网络通信的实现在介绍了一些TCP协议的简单内容后，现在就利用JAVA去实现一个利用TCP协议实现的网络通讯。 实现方式在JAVA当中，实现TCP协议下的网络传输主要是使用流去发送一个数据（DataOutputStream）以及使用缓冲区（BufferReader）去读取得到的数据包。同时，Java提供了一个ServerSocket对象去专门使用TCP协议去进行传输网络的开启。 具体流程是，使用ServerSocket去开启一个网络通讯，然后，使用其中的accept方法去监听网络的数据，利用DataOutputStream去发送数据，以及利用ServerSocket当中的getInputStream流去获取数据包。 具体代码这是一个具体的Demo，其主要的内容为客户端输入一个字符串给服务端，服务端将字符串全部变成大写然后返回给客户端 服务端代码123456789101112131415161718192021222324252627282930313233343536373839404142public class TCPServer &#123; public static void main(String[] args)&#123; String clientSentence; //客户端发送的信息 String capitalizedSentence; //经过服务端改变的信息 try &#123; //在6666端口接受信息 ServerSocket socket = new ServerSocket(6666); //noinspection InfiniteLoopStatement while (true)&#123; //开启监听网络传输当中的数据 Socket connectionSocket = socket.accept(); //获取客户端的数据信息 BufferedReader inFromClient = new BufferedReader( new InputStreamReader(connectionSocket.getInputStream())); //开启向客户端发送信息的流 DataOutputStream outToClient = new DataOutputStream(connectionSocket.getOutputStream()); //将客户端的信息录入 clientSentence = inFromClient.readLine(); //改变客户端的信息，变成全是大写的字母 capitalizedSentence = clientSentence.toUpperCase() + &quot;\\n&quot;; //发送给客户端 outToClient.writeBytes(capitalizedSentence); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 客户端代码1234567891011121314151617181920212223242526272829303132333435363738394041424344public class TCPClient &#123; public static void main(String[] args)&#123; //发送的句子 String sentence; //从服务端接受的句子 String notifySentence; //从控制台接受输入的信息 BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in)); try &#123; //开启网络传输，由于是这是本地的服务端因此是“127.0.0.1” Socket clientSocket = new Socket(&quot;127.0.0.1&quot;,6666); //开启发送数据的传输流 DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream()); //接受数据包缓存区 BufferedReader inFromServer = new BufferedReader( new InputStreamReader(clientSocket.getInputStream())); //获取控制台上的句子 sentence = inFromUser.readLine(); //将句子写入为字节流，并传输出去 outToServer.writeBytes(sentence + &quot;\\n&quot;); //获取服务端的信息 notifySentence = inFromServer.readLine(); System.out.print(&quot;FROM SERVER &quot; + notifySentence); //关闭传输流 clientSocket.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 结果123i am tcp clientFROM SERVER I AM TCP CLIENTProcess finished with exit code 0","categories":[{"name":"technology","slug":"technology","permalink":"http://yoursite.com/categories/technology/"}],"tags":[{"name":"network","slug":"network","permalink":"http://yoursite.com/tags/network/"},{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]}]}