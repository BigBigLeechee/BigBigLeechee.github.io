{"meta":{"title":"Just a blog","subtitle":null,"description":"recode interesting things everywhere","author":"CheshireCat","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-04-03T12:44:59.000Z","updated":"2018-04-03T12:44:59.880Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2018-04-03T15:18:45.000Z","updated":"2018-04-03T15:18:45.874Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"gallery","date":"2018-04-03T12:41:32.000Z","updated":"2018-04-03T12:41:32.870Z","comments":true,"path":"gallery/index.html","permalink":"http://yoursite.com/gallery/index.html","excerpt":"","text":""},{"title":"Technology","date":"2018-04-03T07:29:13.000Z","updated":"2018-04-03T07:29:13.910Z","comments":true,"path":"technology/index.html","permalink":"http://yoursite.com/technology/index.html","excerpt":"","text":""}],"posts":[{"title":"JAVA--UDP协议下的Socket网络通讯","slug":"JAVA-UDP协议下的Socket网络通讯","date":"2018-04-04T07:11:43.000Z","updated":"2018-04-04T07:53:16.206Z","comments":true,"path":"2018/04/04/JAVA-UDP协议下的Socket网络通讯/","link":"","permalink":"http://yoursite.com/2018/04/04/JAVA-UDP协议下的Socket网络通讯/","excerpt":"","text":"UDP协议介绍UDP协议，是User Datagram Protocol,是一种无连接的传输层协议，提供面向事务的简单不可靠信息传递服务。 UDP协议和TCP协议一样是用于处理数据包，是一种无连接协议。之所以说UDP协议是不可靠的，是因为，他有着不提供数据分包，组装和不能够对数据进行排序的缺点，换句话说，即数据发出之后，就无法确认数据是否已经到达，也无法得知到达的数据是否完整。 与TCP协议一种，UDP协议也是直接位于IP协议的顶层。UDP协议的主要作用是将网络数据流量压缩为数据包的形式。一个典型的数据包就是一个二进制数据传输单位。每一个数据包的前八个字节用于记录数据包的信息，后面的字节则是包含具体的传输数据。 Socket网络通讯的实现在Java当中，有着专门利用UDP协议实现的Socket对象（DatagramSocket），利用这个类就可以轻松实现数据传输了。 具体实现思路由于在UDP协议之下，数据是以二进制的形式传输的，因此，无论在接收数据还是发送数据都需要一个byte[]来当做缓存，来记录传输过来的数据。 同时，由于UDP协议的数据传输是利用包的形式进行传输的，因此在发送与接收数据都需要接收这个数据包。在JAVA当中，有着一个专门的对象（DatagramPacket）来管理这些数据包，因此只要利用这些对象就可以轻松接收数据包，然后，再讲数据包的内容导入到缓存当中，就可以慢慢解析里面的二进制数据流了。 具体实现这是一个利用UDP协议的客户端与服务端的简单DEMO，这个DEMO的主要作用在于将客户端传入的字符串转化为全部大写的字符串然后再传回给客户端。 服务端代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public class UDPServer &#123; //缓存区大小 public static final int BUFF_SIZE = 1024; public static void main(String[] args)&#123; try &#123; //打开端口6666的连接 DatagramSocket socket = new DatagramSocket(6666); //初始化缓冲区 byte[] receiveData = new byte[BUFF_SIZE]; byte[] sendData = new byte[BUFF_SIZE]; //noinspection InfiniteLoopStatement while (true)&#123; //接收数据的数据包 DatagramPacket receivePacket = new DatagramPacket(receiveData,receiveData.length); try &#123; //Socket开始接受数据(在没有接受到数据的时候处于阻塞状态) socket.receive(receivePacket); //从接受到的数据包当中获取数据 String sentence = new String(receivePacket.getData()); //获取发送方的IP地址 InetAddress ipAddress = receivePacket.getAddress(); //获取发送方的端口 int port = receivePacket.getPort(); String capitalizedSentence = sentence.toUpperCase(); //将数据写入发送信息的缓冲区当中 sendData = capitalizedSentence.getBytes(); //将缓冲区的信息打包成数据包 DatagramPacket sendPacket = new DatagramPacket(sendData,sendData.length,ipAddress,port); //发送数据 socket.send(sendPacket); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; catch (SocketException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 客户端代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263public class UDPClient &#123; public static void main(String[] args)&#123; BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in)); try &#123; //开启UDP协议的数据传输 DatagramSocket clientSocket = new DatagramSocket(); try &#123; //由于是本地因此IP是“127.0.0.1” InetAddress ipAddress = InetAddress.getByName(&quot;127.0.0.1&quot;); int port = 6666; //初始化缓冲区 byte[] sendData = new byte[UDPServer.BUFF_SIZE]; byte[] receive = new byte[UDPServer.BUFF_SIZE]; try &#123; //获取字符串 String sentence = inFromUser.readLine(); //将数据写入缓冲区当中 sendData = sentence.getBytes(); //将数据打包成数据包 DatagramPacket sendPacket = new DatagramPacket(sendData,sendData.length,ipAddress,port); //发送数据 clientSocket.send(sendPacket); //建立接受数据的包 DatagramPacket receivePacket = new DatagramPacket(receive,receive.length); //接受数据 clientSocket.receive(receivePacket); //展示服务端返回的字符串 String notifySentence = new String(receivePacket.getData()); System.out.print(&quot;FROM SERVER &quot; + notifySentence); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; clientSocket.close(); &#125; catch (UnknownHostException e) &#123; e.printStackTrace(); &#125; &#125; catch (SocketException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 结果123hi i am udp clientFROM SERVER HI I AM UDP CLIENT Process finished with exit code 0","categories":[{"name":"technology","slug":"technology","permalink":"http://yoursite.com/categories/technology/"}],"tags":[{"name":"network","slug":"network","permalink":"http://yoursite.com/tags/network/"}]},{"title":"JAVA----TCP协议下的Socket网络通讯","slug":"JAVA-TCP协议下的Socket网络通讯","date":"2018-04-03T06:20:20.000Z","updated":"2018-04-04T08:00:58.263Z","comments":true,"path":"2018/04/03/JAVA-TCP协议下的Socket网络通讯/","link":"","permalink":"http://yoursite.com/2018/04/03/JAVA-TCP协议下的Socket网络通讯/","excerpt":"","text":"TCP协议介绍TCP协议是一种信息传递可靠的协议，他依靠着三次握手的传输规则确保了连接不会发生错误。在这个协议之下，由于需要使用三次握手去确认目标，因此，确保了数据传输的可靠性。 同时，利用TCP协议进行的数据包会有一个校验码在里面，若发现数据不准确，则接收方会要求发送方重新传输数据。 Socket网络通信的实现在介绍了一些TCP协议的简单内容后，现在就利用JAVA去实现一个利用TCP协议实现的网络通讯。 实现方式在JAVA当中，实现TCP协议下的网络传输主要是使用流去发送一个数据（DataOutputStream）以及使用缓冲区（BufferReader）去读取得到的数据包。同时，Java提供了一个ServerSocket对象去专门使用TCP协议去进行传输网络的开启。 具体流程是，使用ServerSocket去开启一个网络通讯，然后，使用其中的accept方法去监听网络的数据，利用DataOutputStream去发送数据，以及利用ServerSocket当中的getInputStream流去获取数据包。 具体代码这是一个具体的Demo，其主要的内容为客户端输入一个字符串给服务端，服务端将字符串全部变成大写然后返回给客户端 服务端代码123456789101112131415161718192021222324252627282930313233343536373839404142public class TCPServer &#123; public static void main(String[] args)&#123; String clientSentence; //客户端发送的信息 String capitalizedSentence; //经过服务端改变的信息 try &#123; //在6666端口接受信息 ServerSocket socket = new ServerSocket(6666); //noinspection InfiniteLoopStatement while (true)&#123; //开启监听网络传输当中的数据 Socket connectionSocket = socket.accept(); //获取客户端的数据信息 BufferedReader inFromClient = new BufferedReader( new InputStreamReader(connectionSocket.getInputStream())); //开启向客户端发送信息的流 DataOutputStream outToClient = new DataOutputStream(connectionSocket.getOutputStream()); //将客户端的信息录入 clientSentence = inFromClient.readLine(); //改变客户端的信息，变成全是大写的字母 capitalizedSentence = clientSentence.toUpperCase() + &quot;\\n&quot;; //发送给客户端 outToClient.writeBytes(capitalizedSentence); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 客户端代码1234567891011121314151617181920212223242526272829303132333435363738394041424344public class TCPClient &#123; public static void main(String[] args)&#123; //发送的句子 String sentence; //从服务端接受的句子 String notifySentence; //从控制台接受输入的信息 BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in)); try &#123; //开启网络传输，由于是这是本地的服务端因此是“127.0.0.1” Socket clientSocket = new Socket(&quot;127.0.0.1&quot;,6666); //开启发送数据的传输流 DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream()); //接受数据包缓存区 BufferedReader inFromServer = new BufferedReader( new InputStreamReader(clientSocket.getInputStream())); //获取控制台上的句子 sentence = inFromUser.readLine(); //将句子写入为字节流，并传输出去 outToServer.writeBytes(sentence + &quot;\\n&quot;); //获取服务端的信息 notifySentence = inFromServer.readLine(); System.out.print(&quot;FROM SERVER &quot; + notifySentence); //关闭传输流 clientSocket.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 结果123i am tcp clientFROM SERVER I AM TCP CLIENTProcess finished with exit code 0","categories":[{"name":"technology","slug":"technology","permalink":"http://yoursite.com/categories/technology/"}],"tags":[{"name":"network","slug":"network","permalink":"http://yoursite.com/tags/network/"}]}]}