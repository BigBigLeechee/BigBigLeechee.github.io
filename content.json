{"meta":{"title":"Just a blog","subtitle":null,"description":"encode interesting things everywhere","author":"CheshireCat","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-04-03T12:44:59.000Z","updated":"2018-04-03T12:44:59.880Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2018-04-03T15:18:45.000Z","updated":"2018-04-03T15:18:45.874Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"Technology","date":"2018-04-03T07:29:13.000Z","updated":"2018-04-03T07:29:13.910Z","comments":true,"path":"technology/index.html","permalink":"http://yoursite.com/technology/index.html","excerpt":"","text":""},{"title":"gallery","date":"2018-04-03T12:41:32.000Z","updated":"2018-04-03T12:41:32.870Z","comments":true,"path":"gallery/index.html","permalink":"http://yoursite.com/gallery/index.html","excerpt":"","text":""}],"posts":[{"title":"JAVA----TCP协议下的Socket网络通讯","slug":"JAVA-TCP协议下的Socket网络通讯","date":"2018-04-03T06:20:20.000Z","updated":"2018-04-03T16:13:33.268Z","comments":true,"path":"2018/04/03/JAVA-TCP协议下的Socket网络通讯/","link":"","permalink":"http://yoursite.com/2018/04/03/JAVA-TCP协议下的Socket网络通讯/","excerpt":"","text":"TCP协议介绍TCP协议是一种信息传递可靠的协议，他依靠着三次握手的传输规则确保了连接不会发生错误。在这个协议之下，由于需要使用三次握手去确认目标，因此，确保了数据传输的可靠性。 同时，利用TCP协议进行的数据包会有一个校验码在里面，若发现数据不准确，则接收方会要求发送方重新传输数据。 Socket网络通信的实现在介绍了一些TCP协议的简单内容后，现在就利用JAVA去实现一个利用TCP协议实现的网络通讯。 实现方式在JAVA当中，实现TCP协议下的网络传输主要是使用流去发送一个数据（DataOutputStream）以及使用缓冲区（BufferReader）去读取得到的数据包。同时，Java提供了一个ServerSocket对象去专门使用TCP协议去进行传输网络的开启。 具体流程是，使用ServerSocket去开启一个网络通讯，然后，使用其中的accept方法去监听网络的数据，利用DataOutputStream去发送数据，以及利用ServerSocket当中的getInputStream流去获取数据包。 具体代码这是一个具体的Demo，其主要的内容为客户端输入一个字符串给服务端，服务端将字符串全部变成大写然后返回给客户端 服务端代码1234567891011121314151617181920212223242526272829303132333435363738394041public class TCPServer &#123; public static void main(String[] args)&#123; String clientSentence; //客户端发送的信息 String capitalizedSentence; //经过服务端改变的信息 try &#123; //在6666端口接受信息 ServerSocket socket = new ServerSocket(6666); //noinspection InfiniteLoopStatement while (true)&#123; //开启监听网络传输当中的数据 Socket connectionSocket = socket.accept(); //获取客户端的数据信息 BufferedReader inFromClient = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream())); //开启向客户端发送信息的流 DataOutputStream outToClient = new DataOutputStream(connectionSocket.getOutputStream()); //将客户端的信息录入 clientSentence = inFromClient.readLine(); //改变客户端的信息，变成全是大写的字母 capitalizedSentence = clientSentence.toUpperCase() + &quot;\\n&quot;; //发送给客户端 outToClient.writeBytes(capitalizedSentence); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 客户端代码1234567891011121314151617181920212223242526272829303132333435363738394041424344public class TCPClient &#123; public static void main(String[] args)&#123; //发送的句子 String sentence; //从服务端接受的句子 String notifySentence; //从控制台接受输入的信息 BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in)); try &#123; //开启网络传输，由于是这是本地的服务端因此是“127.0.0.1” Socket clientSocket = new Socket(&quot;127.0.0.1&quot;,6666); //开启发送数据的传输流 DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream()); //接受数据包缓存区 BufferedReader inFromServer = new BufferedReader( new InputStreamReader(clientSocket.getInputStream())); //获取控制台上的句子 sentence = inFromUser.readLine(); //将句子写入为字节流，并传输出去 outToServer.writeBytes(sentence + &quot;\\n&quot;); //获取服务端的信息 notifySentence = inFromServer.readLine(); System.out.print(&quot;FROM SERVER &quot; + notifySentence); //关闭传输流 clientSocket.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125;","categories":[{"name":"technology","slug":"technology","permalink":"http://yoursite.com/categories/technology/"}],"tags":[{"name":"network","slug":"network","permalink":"http://yoursite.com/tags/network/"}]}]}